# 开发环境配置
server:
  # 服务端口
  port: 8030
  servlet:
    # 项目contextPath
    context-path: /
  tomcat:
    # tomcat的URI编码
    uri-encoding: UTF-8
    # tomcat最大线程数，默认为200
    max-threads: 800
    # Tomcat启动初始化的线程数，默认值25
    min-spare-threads: 30

spring:
  devtools:
    restart:
      enabled: true
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss

  application:
    name: xwder-zuul-api-gate

eureka:
  client:
    service-url:
      # 指定eureka server通信地址，注意/eureka/小尾巴不能少
      defaultZone: http://eureka:123456@localhost:8001/eureka/,http://eureka:123456@localhost:8002/eureka/

    # 清理间隔 实际开发过程中，我们可能会不停地重启服务，由于Eureka有自己的保护机制，故节点下线后，服务信息还会一直存在于Eureka中。
    # 我们可以通过增加一些配置让移除的速度更快一点，当然只在开发环境下使用，生产环境下不推荐使用
    # 用于开启健康检查，需要在pom.xml中引入actuator的依赖
    healthcheck:
      enabled: true

  instance:
    # 是否注册IP到eureka server，如不指定或设为false，那就会注册主机名到eureka server
    prefer-ip-address: true
    # 定义实例ID格式
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
    # Eureka Client发送心跳给server端的频率
    lease-renewal-interval-in-seconds: 5
    # 表示Eureka Server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则移除该Instance。
    lease-expiration-duration-in-seconds: 5

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
      # 暴露.端点
        include: '*'
      # 取消暴露metrics端点，如需暴露多个，用,分隔；如需暴露所有端点，用'*'
        #exclude: '*'

zuul:
  #  隐藏所有微服务名称(即使用微服务名称无法访问到服务)
  ignored-services: "*"
  #  服务前缀名，想要访问项目之前要加上此路径
  #prefix: /xwder
  routes:
    # book-service 自定义
    book-service:
      path: /book-api/**
      serviceId: xwder-service-book
    # book-service 自定义
    cqust-service:
      path: /cqust-api/**
      serviceId: xwder-service-book
