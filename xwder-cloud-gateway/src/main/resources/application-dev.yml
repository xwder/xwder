# 开发环境配置
server:
  # 服务端口
  port: 8040
  servlet:
    # 项目contextPath
    context-path: /

spring:
  devtools:
    restart:
      enabled: true

  application:
    name: xwder-cloud-gateway

  redis:
    host: 114.67.85.146
    port: 6379
    password: 9t6U3OBxxd

  cloud:
    gateway:
      # 跨域设置
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
            exposedHeaders:
              - content-type
            allowedHeaders:
              - content-type
            allowCredentials: true
            allowedMethods:
              - GET
              - OPTIONS
              - PUT
              - DELETE
              - POST

      # Zuul默认会为所有服务都进行转发操作，我们只需要在访问路径上指定要访问的服务即可，
      # 通过这种方式就不用为每个服务都去配置转发规则，当新加了服务的时候，不用去配置路由规则和重启网关
      discovery:
        locator:
          enabled: true
          # 这个大写的名称还是有很大的影响，如果我们从Zuul升级到Spring Cloud Gateway的话意味着请求地址有改变，
          # 或者重新配置每个服务的路由地址，通过源码笔者发现可以做到兼容处理
          # 开启小写服务名称后大写的服务名称就不能使用，两者只能选其一
          lowerCaseServiceId: true

      routes:
        #         自定义路由断言工厂
        #        - id: customer_route
        #          uri: http://xwder.com
        #          predicates:
        #          - name: CheckAuth
        #            args:
        #              name: xwder
#        - id: host_route
#          uri: http://xwder.com
#          predicates:
#            - Path=/blog/detail/{segment}
#          # 自定义过滤器工厂  Key、Value这种形式的，那么可以不用自己定义配置类，直接继承AbstractNameValueGatewayFilterFactory类即可
#          filters:
#            # 自定义过滤器工厂 继承 AbstractNameValueGatewayFilterFactory
#            - CheckAuth=xwder,男
#            # 自定义过滤器工厂 继承 AbstractGatewayFilterFactory
#            - name: CheckAuth2
#              args:
#                name: Joe
        # 限流
        - id: xwder-biz-book
          uri: lb://xwder-biz-book
          predicates:
            - Path=/book/**
          filters:
            # ·filter名称必须是RequestRateLimiter
            - name: RequestRateLimiter
              args:
                # 允许用户每秒处理多少个请求
                redis-rate-limiter.replenishRate: 10
                # 令牌桶的容量，允许在1s内完成的最大请求数
                redis-rate-limiter.burstCapacity: 20
                # 使用SpEL按名称引用bean
                key-resolver: "#{@ipKeyResolver}"
            # 过滤器会使用Hystrix熔断与回退，原理是将请求包装成RouteHystrixCommand执行，RouteHystrixCommand继承于com.netflix.hystrix.HystrixObservableCommand
            - name: Hystrix
              args:
                name: fallbackcmd
                fallbackUri: forward:/fallback

